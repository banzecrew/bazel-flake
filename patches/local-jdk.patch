diff --git a/src/main/java/com/google/devtools/build/lib/rules/java/JavaOptions.java b/src/main/java/com/google/devtools/build/lib/rules/java/JavaOptions.java
index efcab168b2..0f2a447a67 100644
--- a/src/main/java/com/google/devtools/build/lib/rules/java/JavaOptions.java
+++ b/src/main/java/com/google/devtools/build/lib/rules/java/JavaOptions.java
@@ -589,7 +589,7 @@ public class JavaOptions extends FragmentOptions {
   }
 
   Label defaultHostJavaBase() {
-    return Label.parseAbsoluteUnchecked("@bazel_tools//tools/jdk:remote_jdk11");
+    return Label.parseAbsoluteUnchecked("@bazel_tools//tools/jdk:jdk");
   }
 
   Label defaultJavaToolchain() {
diff --git a/src/test/shell/bazel/bazel_java_test_defaults.sh b/src/test/shell/bazel/bazel_java_test_defaults.sh
index b1aab70f29..f4ecae57e0 100755
--- a/src/test/shell/bazel/bazel_java_test_defaults.sh
+++ b/src/test/shell/bazel/bazel_java_test_defaults.sh
@@ -193,9 +193,6 @@ load("@bazel_tools//tools/jdk:default_java_toolchain.bzl", "default_java_toolcha
 default_java_toolchain(
   name = "toolchain",
   jvm_opts = [
-      # In JDK9 we have seen a ~30% slow down in JavaBuilder performance when using
-      # G1 collector and having compact strings enabled.
-      "-XX:+UseParallelOldGC",
       "-XX:-CompactStrings",
       # override the javac in the JDK.
       "--patch-module=java.compiler=\$(location @remote_java_tools//:java_compiler_jar)",
@@ -211,7 +208,7 @@ EOF
   bazel build //:toolchain || fail "default_java_toolchain target failed to build"
   bazel cquery --output=build //:toolchain >& $TEST_log || fail "failed to query //:toolchain"
 
-  expect_log 'jvm_opts = \["-XX:+UseParallelOldGC", "-XX:-CompactStrings", "--patch-module=java.compiler=$(location @remote_java_tools//:java_compiler_jar)", "--patch-module=jdk.compiler=$(location @remote_java_tools//:jdk_compiler_jar)",'
+  expect_log 'jvm_opts = \["-XX:-CompactStrings", "--patch-module=java.compiler=$(location @remote_java_tools//:java_compiler_jar)", "--patch-module=jdk.compiler=$(location @remote_java_tools//:jdk_compiler_jar)",'
   expect_log 'tools = \["@remote_java_tools//:java_compiler_jar", "@remote_java_tools//:jdk_compiler_jar"\]'
 }
 
diff --git a/tools/jdk/BUILD.tools b/tools/jdk/BUILD.tools
index 5045961de6..3a3153e91e 100644
--- a/tools/jdk/BUILD.tools
+++ b/tools/jdk/BUILD.tools
@@ -337,7 +337,7 @@ alias(
 
 alias(
     name = "host_jdk",
-    actual = ":remote_jdk11",
+    actual = ":jdk",
 )
 
 bootclasspath(
@@ -397,14 +397,12 @@ default_java_toolchain(
     target_version = "16",
 )
 
-# Deprecated, do not use.
-# It will be removed after migration to Java toolchain resolution.
 default_java_toolchain(
-    name = "toolchain_hostjdk8",
-    configuration = JVM8_TOOLCHAIN_CONFIGURATION,
+    name = "toolchain_hostjdk16",
+    configuration = dict(),
     java_runtime = ":current_host_java_runtime",
-    source_version = "8",
-    target_version = "8",
+    source_version = "16",
+    target_version = "16",
     toolchain_definition = False,
 )
 
diff --git a/tools/jdk/default_java_toolchain.bzl b/tools/jdk/default_java_toolchain.bzl
index d1f3a43df4..61106c852f 100644
--- a/tools/jdk/default_java_toolchain.bzl
+++ b/tools/jdk/default_java_toolchain.bzl
@@ -85,15 +85,11 @@ DEFAULT_TOOLCHAIN_CONFIGURATION = dict(
         # Compact strings make JavaBuilder slightly slower.
         "-XX:-CompactStrings",
     ] + JDK9_JVM_OPTS,
-    turbine_jvm_opts = [
-        # Turbine is not a worker and parallel GC is faster for short-lived programs.
-        "-XX:+UseParallelOldGC",
-    ],
     tools = [
         "@remote_java_tools//:java_compiler_jar",
         "@remote_java_tools//:jdk_compiler_jar",
     ],
-    java_runtime = "@bazel_tools//tools/jdk:remote_jdk11",
+    java_runtime = "@bazel_tools//tools/jdk:jdk",
 )
 
 # The 'vanilla' toolchain is an unsupported alternative to the default.
@@ -124,17 +120,13 @@ PREBUILT_TOOLCHAIN_CONFIGURATION = dict(
         # Compact strings make JavaBuilder slightly slower.
         "-XX:-CompactStrings",
     ] + JDK9_JVM_OPTS,
-    turbine_jvm_opts = [
-        # Turbine is not a worker and parallel GC is faster for short-lived programs.
-        "-XX:+UseParallelOldGC",
-    ],
     tools = [
         "@remote_java_tools//:java_compiler_jar",
         "@remote_java_tools//:jdk_compiler_jar",
     ],
     ijar = ["@bazel_tools//tools/jdk:ijar_prebuilt_binary"],
     singlejar = ["@bazel_tools//tools/jdk:prebuilt_singlejar"],
-    java_runtime = "@bazel_tools//tools/jdk:remote_jdk11",
+    java_runtime = "@bazel_tools//tools/jdk:jdk",
 )
 
 # The new toolchain is using all the tools from sources.
@@ -143,17 +135,13 @@ NONPREBUILT_TOOLCHAIN_CONFIGURATION = dict(
         # Compact strings make JavaBuilder slightly slower.
         "-XX:-CompactStrings",
     ] + JDK9_JVM_OPTS,
-    turbine_jvm_opts = [
-        # Turbine is not a worker and parallel GC is faster for short-lived programs.
-        "-XX:+UseParallelOldGC",
-    ],
     tools = [
         "@remote_java_tools//:java_compiler_jar",
         "@remote_java_tools//:jdk_compiler_jar",
     ],
     ijar = ["@remote_java_tools//:ijar_cc_binary"],
     singlejar = ["@remote_java_tools//:singlejar_cc_bin"],
-    java_runtime = "@bazel_tools//tools/jdk:remote_jdk11",
+    java_runtime = "@bazel_tools//tools/jdk:jdk",
 )
 
 def default_java_toolchain(name, configuration = DEFAULT_TOOLCHAIN_CONFIGURATION, toolchain_definition = True, **kwargs):
